# Docker Environment Configuration
# Use this template for Docker development and production

# Server Configuration
PORT=8080
ENVIRONMENT=development
FRONTEND_PATH=frontend/dist

# Database Configuration (Docker PostgreSQL)
# These values work with the docker-compose.yml setup
DB_HOST=postgres
DB_PORT=5432
DB_USER=postgres
DB_PASSWORD=postgres
DB_NAME=chronotes
DB_SSLMODE=disable

# Google OAuth Configuration
# Replace with your actual OAuth credentials
GOOGLE_CLIENT_ID=your-google-client-id-here
GOOGLE_CLIENT_SECRET=your-google-client-secret-here
GOOGLE_REDIRECT_URL=http://localhost:8080/v1/auth/google/callback

# Docker Notes:
# 1. Copy this file to .env for Docker development
# 2. Replace Google OAuth credentials with your actual values
# 3. Use 'postgres' as DB_HOST (service name in docker-compose)
# 4. The PostgreSQL container will create the database automatically
# 5. Run with: docker-compose up --build

# Production Docker Notes:
# 1. Change ENVIRONMENT to 'production'
# 2. Use secure passwords for DB_PASSWORD
# 3. Change GOOGLE_REDIRECT_URL to your production domain
# 4. Consider using Docker secrets for sensitive data 