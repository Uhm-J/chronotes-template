# Production Environment Configuration
# Use this template for production deployments

# Server Configuration
PORT=8080
ENVIRONMENT=production
FRONTEND_PATH=frontend/dist

# Database Configuration (PostgreSQL)
# Use managed PostgreSQL service like AWS RDS, Google Cloud SQL, etc.
DB_HOST=your-production-db-host
DB_PORT=5432
DB_USER=your-production-db-user
DB_PASSWORD=your-secure-production-password
DB_NAME=chronotes_production
DB_SSLMODE=require

# Google OAuth Configuration
# Use production OAuth credentials
GOOGLE_CLIENT_ID=your-production-google-client-id
GOOGLE_CLIENT_SECRET=your-production-google-client-secret
GOOGLE_REDIRECT_URL=https://yourdomain.com/v1/auth/google/callback

# Production Security Notes:
# 1. Use strong, randomly generated passwords
# 2. Enable SSL/TLS for database connections (DB_SSLMODE=require)
# 3. Use HTTPS for all OAuth redirect URLs
# 4. Store secrets securely (AWS Secrets Manager, etc.)
# 5. Restrict database access to application servers only
# 6. Use environment variables or secret management systems
# 7. Enable proper firewall rules and security groups
# 8. Consider using a reverse proxy (nginx, Cloudflare)
# 9. Set up monitoring and logging
# 10. Configure backup and disaster recovery

# Deployment Options:
# - Docker: Use with docker-compose or Kubernetes
# - Cloud: Deploy to AWS ECS, Google Cloud Run, or similar
# - VPS: Deploy to any Linux server with PostgreSQL
# - Heroku: Use Heroku Postgres add-on 